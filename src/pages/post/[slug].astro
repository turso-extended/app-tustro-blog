---
import { Markdown } from "@astropub/md";
import BlogPost from "../../layouts/BlogPost.astro";
import { client } from "../../lib/tursoDb";
import type { InValue } from "@libsql/client";
import type { Blog } from "../../lib/types";

const { slug } = Astro.params;
let post: Blog | null = null;
console.log({ slug });

if (!slug) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}

try {
  const postResponse = await client.execute({
    sql: "select posts.content, posts.published, posts.title, posts.description, posts.slug, posts.hero, posts.created_at, authors.first_name, authors.last_name, authors.slug, authors.avatar, authors.twitter from posts left join authors on authors.id = posts.author_id where posts.slug = ?;",
    args: [slug as InValue],
  });
  if (!postResponse) {
    return new Response(null, {
      status: 404,
      statusText: "Not found",
    });
  }

  const blogPostData = postResponse.rows[0];

  if (!blogPostData) {
    return new Response(null, {
      status: 404,
      statusText: "Not found",
    });
  }

  post = {
    content: blogPostData.content as string,
    published: blogPostData.published as unknown as boolean,
    title: blogPostData.title as string,
    description: blogPostData.description as string,
    slug: blogPostData.slug as string,
    hero: blogPostData.hero as string,
    created_at: blogPostData.created_at as number,
    author: {
      first_name: blogPostData.first_name as string,
      last_name: blogPostData.last_name as string,
      slug: blogPostData.slug as string,
      avatar: blogPostData.avatar as string,
      email: blogPostData.email as string,
      socials: {
        twitter: blogPostData.twitter as string,
      },
      created_at: blogPostData.created_at as number,
    },
  };
} catch (error) {
  console.log(error);
}
---

<BlogPost {...post}>
  <Markdown of={post?.content || ""} />
</BlogPost>
